; Generated by JITX 3.24.1
#use-added-syntax(jitx)
defpackage main :
  import core
  import jitx
  import jitx/commands
  import jitx/parts

  import helpers
  import jsl

  import ethernet-io/controller
  import ethernet-io/power

; Define the shape/size of the board
val board-shape = RoundedRectangle(100.0, 70.0, 3.0)

pcb-module communications-core :
  port rail-3v3 : power

  inst pwr-mng : power-management
  inst zener : create-part(mpn = "MMSZ4689T1G", manufacturer = "ON Semiconductor")
  public inst usb-if : connectors/components/USB/USBTypeC/USBC-HighSpeed-Iface()

  net (zener.A usb-if.VDD-USB.V-)
  net (zener.K usb-if.VDD-USB.V+)

  inst ctl : controller

  net usb-data (ctl.USB usb-if.USB)
  net (ctl.VDD-USB usb-if.VDD-USB)

  net VBUS (ctl.VDD-USB.V+)
  public net P3V3 (ctl.rail-3v3.V+)
  public net GND (ctl.rail-3v3.V-)

  net (pwr-mng.VDD-3v3 rail-3v3 ctl.rail-3v3)
  net (pwr-mng.VDD-USB usb-if.VDD-USB ctl.VDD-USB)

  symbol(GND) = GND-SYMB
  symbol(VBUS) = PWR-SYMB
  symbol(P3V3) = PWR-SYMB

  inst ethernet-jack : connectors/components/JD0-0001NL/connector[2]
  inst netsw : microchip-networking/components/KSZ9563/circuit(substrate)
  val mdi-constraint = MDI-1000Base-T-Constraint(
    route-struct = diff-routing-struct(substrate, 100)
  )

  val esd = diodes/ESD224DQAR/create-esd-pool(4, GND)

  for i in 0 to 2:
    require eth : MDI-1000Base-T from ethernet-jack[i]
    require sw-mdi : microchip-networking/components/KSZ9563/MDI-1000BaseT-With-LEDs from netsw.netsw

    within [src, dst] = constrain-topology(sw-mdi.MDI => eth, mdi-constraint):
      require protected-pairs:dual-pair[4] from esd
      for p in 0 to 4:
        topo-pair(src.TP[p] => protected-pairs[p].A => protected-pairs[p].B => dst.TP[p])

  
  
; Module to run as a design
pcb-module top-level :
  inst core : communications-core
  place(core.usb-if.USBC.J) at loc(10.0, -30.5) on Top

  geom(core.GND):
    copper-pour(LayerIndex(1), isolate = 0.125, rank = 1) = board-shape
    copper-pour(LayerIndex(2), isolate = 0.125, rank = 1) = board-shape
  geom(core.P3V3):
    copper-pour(LayerIndex(3), isolate = 0.125, rank = 1) = board-shape
; Set the :
;     design-name     - a directory with this name will be created in the "designs" directory
;     board           - a Board object representing the stackup, rules and board shape for a particular design
;     signal-shrink   - a distance in mm to pull back copper signals from the board edge
setup-design("jitx-design", board-shape, signal-shrink = 0.5)

; Set the top level module (the module to be compile into a schematic and PCB)
set-main-module(top-level)

; View the results
; take a look at the BOM that was generated
view-bom(BOM-STD)
; examine the schematic that was auto-generated
view-schematic()
; view the board that was created
view-board()


